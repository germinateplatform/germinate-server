import com.bmuschko.gradle.cargo.convention.Deployable
import com.bmuschko.gradle.cargo.tasks.remote.CargoRedeployRemote

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.9.0'
    }
}

plugins {
    id 'java'
    id 'war'
}

apply plugin: 'com.bmuschko.cargo-base'

compileJava.options.encoding = 'UTF-8'

group 'uk.ac.hutton.germinate'
version '4.6.1'

sourceCompatibility = 11

repositories {
    maven {
        url 'https://repo.spring.io/plugins-release/'
    }
    maven {
        url 'http://maven.imagej.net/content/repositories/public/'
    }
    maven {
        url 'https://nexus.geomatys.com/repository/geotoolkit/'
    }
    maven {
        url 'https://repo.osgeo.org/repository/release/'
    }
    mavenCentral()
}

dependencies {
    compile fileTree(dir: 'lib', include: ['*.jar'])

    implementation 'commons-cli:commons-cli:1.5.0'
    implementation 'commons-io:commons-io:2.11.0'

    implementation 'com.drewnoakes:metadata-extractor:2.18.0'

    implementation 'org.json:json:20220924'
    implementation 'com.google.code.gson:gson:2.10'

    implementation 'mysql:mysql-connector-java:8.0.31'
    implementation 'org.xerial:sqlite-jdbc:3.39.3.0'
    implementation 'cisd:jhdf5:14.12.6'
    implementation 'net.coobird:thumbnailator:0.4.18'
//    implementation 'com.zaxxer:HikariCP:4.0.3'
    implementation 'org.jooq:jooq:3.16.18'
    implementation 'org.dhatim:fastexcel-reader:0.14.0'
    implementation 'com.drewnoakes:metadata-extractor:2.18.0'
    implementation 'xerces:xercesImpl:2.12.2'
    implementation 'org.codehaus.castor:castor-core:1.4.1'
    implementation ('org.codehaus.castor:castor-xml:1.4.1') {
        exclude group: 'org.springframework'
    }

    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.activation:activation:1.1.1'
    implementation 'org.glassfish.jaxb:jaxb-runtime:4.0.2'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'

    implementation 'org.flywaydb:flyway-core:6.5.7'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'de.poiu.apron:apron:2.1.1'

    implementation 'de.ipk-gatersleben:isa4j:1.1.0'

    providedCompile 'jakarta.servlet:jakarta.servlet-api:6.0.0'

    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:3.1.1'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:3.1.1'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:3.1.1'

    implementation 'javax.media:jai_core:1.1.3'
    implementation 'org.geotools:gt-shapefile:27.2'

    implementation 'net.logicsquad:nanocaptcha:1.3'

    // Disabled Swagger until we can figure out how to make it work with Jersey3 and Jakarta
//    implementation 'io.swagger.core.v3:swagger-jaxrs2-jakarta:2.2.0'
//    implementation 'io.swagger.core.v3:swagger-jaxrs2-servlet-initializer-jakarta:2.2.0'
}

// Generate a .jar file for the Germinate importer project
task jarForImporter (type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    archiveFileName = "germinate-core-${project.version}.jar"
    includeEmptyDirs = false
    include '**/germinate/resource/**'
    include '**/Database.class'
    include '**/util/**Utils**'
    include '**/util/**/**hdf**/**'
    include '**/auth/**UserType**'
    include '**/Secured**'
    include '**/PermitAll**'
    include '**/AuthenticationFilter**'
    include '**/**DatasetTableResource**'
    include '**/ExportResource**'
    include '**/BaseResource**'
    include '**/ContextResource**'
    include '**/IFilteredResource**'
    include '**/PropertyWatcher**'
}

// Generate a .jar file that other applications can use to communicate with the API
task jarClient (type: Jar, dependsOn: classes) {
    from sourceSets.main.output
    archiveFileName = "germinate-client-${project.version}.jar"
    includeEmptyDirs = false
    include '**/germinate/resource/**'
    include '**/pojos/**'
    include '**/StatusMessage**'
    include '**/client/**'
}

// Generate a .war file
war {
    dependsOn jar, jarForImporter, jarClient

    rootSpec.exclude('**/jhi/**/*.class')
    rootSpec.includeEmptyDirs = false

    // Include external .jar files, but exclude the Germinate client and core.
    classpath fileTree(dir:'build/libs/', include:'*.jar', excludes: ['germinate-client.jar', 'germinate-core.jar'])

    // Set the classpath
    manifest {
        attributes('Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '))
    }

    webInf {
        // Include the .properties file into the classes folder
        from(project.projectDir.toString()) {
            include 'config.properties'
            include 'logging.properties'
            into('classes')
        }
    }

    // Include the client code if it's available
    from("${project.projectDir.toString()}/client") {
        include '**/**.*'
        into('/')
    }
}

// Deploy the created .war file to Tomcat
task deployTomcat (type: CargoRedeployRemote) {
    dependsOn = [war]
    containerId = project.findProperty('tomcat.manager.version') ?: "tomcat10x"
    protocol = project.findProperty('tomcat.manager.protocol') ?: "http"
    hostname = project.findProperty('tomcat.manager.hostname') ?: "localhost"
    port = (project.findProperty('tomcat.manager.port') ?: "8080") as Integer
    username = project.findProperty('tomcat.manager.username') ?: ""
    password = project.findProperty('tomcat.manager.password') ?: ""
    deployables = [new Deployable(files: project.files([war.archiveFile]), context: "${project.'project.name'}/v${project.version}")]
}

// Automatically build both jars on every build
rootProject.tasks.getByName('build').dependsOn jarClient
rootProject.tasks.getByName('build').dependsOn jarForImporter